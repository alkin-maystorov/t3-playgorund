import { type NextPage } from "next";
import Head from "next/head";
import { signIn, signOut, useSession } from "next-auth/react";
import { trpc } from "../utils/trpc";
import React, { useState } from "react";

const Input: React.FC = () => {
  const [reminder, setReminder] = useState("");

  const newReminder = trpc.reminder.createReminder.useMutation();

  return (
    <form
      className="flex gap-4"
      onSubmit={(event) => {
        event.preventDefault();
        newReminder.mutate({ text: reminder });
        setReminder("");
      }}
    >
      <input
        type="text"
        value={reminder}
        placeholder="Your reminder..."
        minLength={2}
        maxLength={100}
        onChange={(event) => setReminder(event.target.value)}
        className="rounded-md border-2 border-violet-600 bg-neutral-900 px-4 py-2 focus:outline-none"
      />

      <button
        className="rounded-md border-2 border-violet-600 bg-neutral-900 px-4 py-2 hover:bg-violet-600"
        disabled={newReminder.isLoading}
      >
        + Add Reminder
      </button>

      {newReminder.error?.message}
    </form>
  );
};

const Reminders: React.FC = () => {
  const { data: reminders, isLoading } = trpc.reminder.getAll.useQuery();
  const [isDone, setIsDone] = useState(false);

  const deleteReminder = trpc.reminder.deleteReminder.useMutation();

  if (isLoading) return <div>Fetching reminders...</div>;

  return (
    <div>
      {reminders?.map((reminder, index) => {
        return (
          <div key={index} className="p-4">
            <p
              className={`flex cursor-pointer items-center justify-between ${
                isDone && "line-through"
              }`}
            >
              <i onClick={() => setIsDone(!isDone)}>{reminder.text}</i>
              <button
                className="rounded-md  border border-red-500 bg-neutral-900 px-4 py-2 hover:bg-red-500"
                disabled={deleteReminder.isLoading}
                onClick={() => deleteReminder.mutate({ id: reminder.id })}
              >
                Delete
              </button>
            </p>
          </div>
        );
      })}
    </div>
  );
};

const Home: NextPage = () => {
  const { data: session, status } = useSession();

  if (status === "loading") {
    return <main className="flex flex-col items-center pt-4">Loading...</main>;
  }

  return (
    <>
      <Head>
        <title>Reminder List</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="ml-auto mr-auto flex min-h-screen max-w-7xl flex-col p-12">
        <section className="flex w-full items-center justify-between">
          <h1 className="cursor-default rounded-md border-2 border-violet-600 bg-neutral-900 px-4 py-2">
            {session && session.user?.name + "'s"} Reminder List
          </h1>

          <div className="flex gap-4">
            {session ? (
              <>
                <Input />

                <button
                  className="rounded-md border-2 border-violet-600 bg-neutral-900 px-4 py-2 hover:bg-violet-600"
                  onClick={() => signOut()}
                >
                  Logout
                </button>
              </>
            ) : (
              <button
                className="rounded-md border-2 border-violet-600 bg-neutral-900 px-4 py-2 hover:bg-violet-600"
                onClick={() => signIn("discord")}
              >
                Login with Discord
              </button>
            )}
          </div>
        </section>
        {session && (
          <div className="mt-5 rounded-md border-2 border-violet-600 bg-neutral-900 px-4 py-2">
            <Reminders />
          </div>
        )}
      </main>
    </>
  );
};

export default Home;
